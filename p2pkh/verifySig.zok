from "ecc/babyjubjubParams" import BabyJubJubParams
import "ecc/babyjubjubParams.code" as context
from "./pubkey" import extractPublicKey
import "utils/pack/u32/nonStrictUnpack256" as unpack256u
import "hashes/sha256/1024bitPadded" as sha256

// -- modified from verifyEddsa standard library by removing the assertion part
// import "ecc/edwardsScalarMult" as scalarMult
import "ecc/edwardsAdd" as add
// Function that implements scalar multiplication for a fixed base point
// Curve parameters are defined with the last argument
// The exponent is hard-coded to a 256bit scalar, hence we allow wrapping around the group for certain
// curve parameters.
// Note that the exponent array is not check to be boolean in this gadget
// Reference: https://github.com/zcash-hackworks/sapling-crypto/blob/master/src/jubjub/fs.rs#L555
def scalarMult(bool[256] exponent, field[2] pt, BabyJubJubParams context) -> field[2]:

    field[2] infinity = context.INFINITY

    field[2] doubledP = pt
    field[2] accumulatedP = infinity

    for u32 i in 0..256 do
        u32 j = 255 - i
        field[2] candidateP = add(accumulatedP, doubledP, context)
        accumulatedP = if exponent[j] then candidateP else accumulatedP fi
        doubledP = add(doubledP, doubledP, context)
    endfor

    // assert(onCurve(accumulatedP, context))

    return accumulatedP

// import "signatures/verifyEddsa" as verifyEddsa
import "utils/pack/bool/nonStrictUnpack256" as unpack256bool
import "ecc/edwardsOnCurve" as onCurve
import "ecc/edwardsOrderCheck" as orderCheck
import "utils/casts/u32_8_to_bool_256"
/// Verifies an EdDSA Signature.
///
/// Checks the correctness of a given EdDSA Signature (R,S) for the provided
/// public key A and message (M0, M1).
/// This python repo provides the tooling for creating valid signatures:
/// https://github.com/Zokrates/pycrypto
///
/// For more information see:
/// https://en.wikipedia.org/wiki/EdDSA
/// https://eprint.iacr.org/2015/677.pdf
///
/// Arguments:
///    R: Curve point. Hidden version of the per-message nonce.
///    S: Field element. Signature to be verified.
///    A: Curve point. Public part of the key used to create S.
///    M0: 256bit array. First 256bits of the message used to create S  .
///    M1: 256bit array. Trailing 256bits of the message used to create S  .
///    context: Curve parameters used to create S.
///
/// Returns:
///     Return true for S being a valid EdDSA Signature, false otherwise.
def verifyEddsa(private field[2] R, private field S, field[2] A, u32[8] M0, u32[8] M1, BabyJubJubParams context) -> bool:

    field[2] G = [context.Gu, context.Gv]

    // Check if R is on curve and if it is not in a small subgroup. A is public input and can be checked offline
    // assert(onCurve(R, context)) // throws if R is not on curve
    // assert(orderCheck(R, context))

    u32[8] Rx = unpack256u(R[0])
    u32[8] Ax = unpack256u(A[0])
    bool[256] hRAM = u32_8_to_bool_256(sha256(Rx, Ax, M0, M1))

    bool[256] sBits = unpack256bool(S)
    field[2] lhs = scalarMult(sBits, G, context)

    field[2] AhRAM = scalarMult(hRAM, A, context)
    field[2] rhs = add(R, AhRAM, context)

    bool out = rhs[0] == lhs[0] && rhs[1] == lhs[1]

    return out

def verifySig(field[2] R, field S, u8[65] rawPK, u32[8] M0, u32[8] M1) -> bool:
    BabyJubJubParams context = context()
    field[2] A = extractPublicKey(rawPK)
    bool isVerified = verifyEddsa(R, S, A, M0, M1, context)
    return isVerified

def main(private field[2] R, private field S, private u8[65] rawPK, private u32[8] M0, private u32[8] M1):
    assert(verifySig(R, S, rawPK, M0, M1))
    return
