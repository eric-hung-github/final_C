from "./common" import field_to_u8
from "./pksha256" import pksha256
from "./verifySig" import verifySig
import "utils/pack/u32/pack128" as pack128
// -- Parameters --
const u32 MAX_OPS = 20
const u32 MAX_STACK_ = 16
// workaround for not having short-circuit in the branch
const u32 STACK_OFFSET = 8
const u32 MAX_STACK = MAX_STACK_ + STACK_OFFSET
const u32 MAX_OPS_ = MAX_OPS + 1

struct Context {
  // message for checking signature
  u32[8] M0
  u32[8] M1
}

// --- OPs ---
const field OP_PUSHDATA1    =   76 // push next value into the stack
// const field OP_DUP          =   118
const field OP_HASH256      =   170
const field OP_CHECKSIG     =   172
const field OP_EQUALVERIFY  =   136

// --- instructions ---
// def opDupStack(field[MAX_STACK] stack, u32 idx, Context ctx) -> field[MAX_STACK]:
//   stack[idx] = stack[idx-1]
//   return stack

// def opDupIdx(u32 idx) -> u32:
//   return idx+1

def opHash256Stack(field[MAX_STACK] stack, u32 idx, Context ctx) -> field[MAX_STACK]:
  u8[32] seg1 = field_to_u8(stack[idx-3])
  u8[32] seg2 = field_to_u8(stack[idx-2])
  u8[32] seg3 = field_to_u8(stack[idx-1])
  u8[65] rawPK = [...seg1[8..32], ...seg2[8..32], ...seg3[15..32]]
  u32[8] hash = pksha256(rawPK)
  stack[idx] = pack128(hash[0..4])
  stack[idx+1] = pack128(hash[4..8])
  return stack

def opHash256Idx(u32 idx) -> u32:
  return idx+2

def opCheckSigStack(field[MAX_STACK] stack, u32 idx, Context ctx) -> field[MAX_STACK]:
  field[2] R = [stack[idx-6], stack[idx-5]]
  field S = stack[idx-4]
  u8[32] seg1 = field_to_u8(stack[idx-3])
  u8[32] seg2 = field_to_u8(stack[idx-2])
  u8[32] seg3 = field_to_u8(stack[idx-1])
  u8[65] rawPK = [...seg1[8..32], ...seg2[8..32], ...seg3[15..32]]
  stack[idx-6] = verifySig(R, S, rawPK, ctx.M0, ctx.M1) ? 1 : 0
  return stack

def opCheckSigIdx(u32 idx) -> u32:
  return idx-5

def opEqualVerifyStack(field[MAX_STACK] stack, u32 idx, Context ctx) -> field[MAX_STACK]:
  return stack

def opEqualVerifyIdx(u32 idx) -> u32:
  return idx-4

def opEqualVerifyReverted(field[MAX_STACK] stack, u32 idx, Context ctx) -> bool:
  return stack[idx-4] != stack[idx-2] || stack[idx-3] != stack[idx-1]

def exec(field op, field[MAX_STACK] stack, u32 idx, Context ctx) -> (field[MAX_STACK], u32, bool):
  bool reverted = false
  // stack = op == OP_DUP ? opDupStack(stack, idx, ctx) : stack
  // idx = op == OP_DUP ? opDupIdx(idx) : idx
  stack = op == OP_HASH256 ? opHash256Stack(stack, idx, ctx) : stack
  idx = op == OP_HASH256 ? opHash256Idx(idx) : idx
  stack = op == OP_CHECKSIG ? opCheckSigStack(stack, idx, ctx) : stack
  idx = op == OP_CHECKSIG ? opCheckSigIdx(idx) : idx
  // stack = op == OP_EQUALVERIFY ? opEqualVerifyStack(stack, idx, ctx) : stack // noop
  reverted = op == OP_EQUALVERIFY ? reverted || opEqualVerifyReverted(stack, idx, ctx) : reverted
  idx = op == OP_EQUALVERIFY ? opEqualVerifyIdx(idx) : idx
  return stack, idx, reverted

def opPushData1Stack(field[MAX_STACK] stack, u32 stackIdx, field[MAX_OPS_] data, u32 dataIdx) -> field[MAX_STACK]:
  stack[stackIdx] = data[dataIdx+1]
  return stack

def opPushData1Idx(u32 stackIdx) -> u32:
  return stackIdx+1

def execWithData(field op, field[MAX_STACK] stack, u32 stackIdx, field[MAX_OPS_] data, u32 dataIdx) -> (field[MAX_STACK], u32, u32):
  stack = op == OP_PUSHDATA1 ? opPushData1Stack(stack, stackIdx, data, dataIdx) : stack
  stackIdx = op == OP_PUSHDATA1 ? opPushData1Idx(stackIdx) : stackIdx
  u32 advance = 0
  advance = op == OP_PUSHDATA1 ? 1 : advance
  return stack, stackIdx, advance

def vm(field[MAX_STACK_] initialStack, u32 initialStackIdx, field[MAX_OPS] ops, Context ctx) -> (field[MAX_STACK], u32, bool):
  field[STACK_OFFSET] padding = [0; STACK_OFFSET]
  bool reverted = false
  field[MAX_STACK] stack = [...padding, ...initialStack]
  u32 stackIdx = initialStackIdx + STACK_OFFSET
  field[MAX_OPS_] ops_ = [...ops, 0]
  for u32 i in 0..MAX_OPS do
    bool opReverted = false
    field op = ops_[i]
    stack, stackIdx, opReverted = exec(op, stack, stackIdx, ctx)
    u32 dataAdvance = 0
    stack, stackIdx, dataAdvance = execWithData(op, stack, stackIdx, ops_, i)
    i = i + dataAdvance
    reverted = opReverted || reverted
  endfor
  return stack, stackIdx, reverted

// helper function
def emptyInitialStack() -> field[MAX_STACK_]:
  return [0; MAX_STACK_]

// return value: reverted, top stack value
def main(private field[MAX_STACK_] initialStack, private u32 initialStackIdx, field[MAX_OPS] ops, u32[8] M0, u32[8] M1) -> (bool, field):
  Context ctx = Context {
    M0: M0,
    M1: M1,
  }
  field[MAX_STACK] stack, u32 stackIdx, bool reverted = vm(initialStack, initialStackIdx, ops, ctx)
  return reverted, stack[stackIdx-1]

