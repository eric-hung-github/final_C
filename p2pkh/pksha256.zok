import "utils/casts/u8_to_bits" as u8_to_bits
import "utils/casts/u32_from_bits" as u32_from_bits
import "hashes/sha256/1024bit" as sha2561024
import "hashes/sha256/256bitPadded" as sha256256
from "./common" import field_to_u8

def u8_to_u32(u8[4] input) -> u32:
    return u32_from_bits(\
        [...u8_to_bits(input[0]), ...u8_to_bits(input[1]), ...u8_to_bits(input[2]), ...u8_to_bits(input[3])]\
    )

def u8_to_u32_256(u8[32] input) -> u32[8]:
    return [
        u8_to_u32(input[0..4]),
        u8_to_u32(input[4..8]),
        u8_to_u32(input[8..12]),
        u8_to_u32(input[12..16]),
        u8_to_u32(input[16..20]),
        u8_to_u32(input[20..24]),
        u8_to_u32(input[24..28]),
        u8_to_u32(input[28..32])
    ]

// sha256 twice for public key
def pksha256(private u8[65] pk) -> u32[8]:
    u32[8] pk1 = u8_to_u32_256(pk[0..32])
    u32[8] pk2 = u8_to_u32_256(pk[32..64])
    u32[8] pk3 = [
        u8_to_u32([pk[64], 0x80 /* padding */, 0, 0]),
        0,
        0,
        0,
        0,
        0,
        0,
        0
    ]
    u32[8] pk4 = [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        65 * 8  /* original message bits */
    ]
    
    return sha256256(sha2561024(pk1, pk2, pk3, pk4))

def main(private field[3] pk) -> u8[65]:
    u8[32] seg1 = field_to_u8(pk[0])
    u8[32] seg2 = field_to_u8(pk[1])
    u8[32] seg3 = field_to_u8(pk[2])
    u8[65] rawPK = [...seg1[8..32], ...seg2[8..32], ...seg3[15..32]]
    return rawPK